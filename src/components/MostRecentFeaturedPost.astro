---
import FeaturedPost from './FeaturedPost.astro';
type Post = {
  url: string;
  frontmatter: {
    title: string;
    pubDate: string;
    tags?: string[];
  };
};


const allPosts = Object.entries(import.meta.glob('/src/blog/*.md', { eager: true }))
  .map(([path, post]) => ({
    ...(post as Record<string, any>),
    url: '/posts/' + path.split('/').pop().replace('.md', ''),
  })) as Post[];

// Filter posts with 'featured' tag and sort by pubDate descending
const featuredPosts = allPosts.filter((post) => {
  const tags = post.frontmatter.tags || [];
  return tags.includes('featured');
}).sort((a, b) => new Date(b.frontmatter.pubDate).getTime() - new Date(a.frontmatter.pubDate).getTime());

const mostRecentFeatured = featuredPosts[0];
---
<p>Featured:
{mostRecentFeatured ? (
  <FeaturedPost url={mostRecentFeatured.url} title={mostRecentFeatured.frontmatter.title} />
) : (
  <p>No featured post found.</p>
)}
</p>



